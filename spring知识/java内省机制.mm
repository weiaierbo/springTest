{"objectClass":"NSDictionary","root":{"objectClass":"MindNode","ID":"YPSSP","rootPoint":{"objectClass":"CGPoint","x":360,"y":636.5},"lineColorHex":"#BBBBBB","children":{"0":{"objectClass":"MindNode","ID":"NFLTY","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"68BQB","lineColorHex":"#DC306C","text":"内省（Introspector）是Java语言对Bean类属性、事件的一种缺省处理方法。\n 例如类A中有属性name,那我们可以通过getName,setName来得到其值或者设置新的值。\n 通过getName/setName来访问name属性，这就是默认的规则。\n Java中提供了一套API用来访问某个属性的getter/setter方法，通过这些API可以使你不需要了解这个规则，\n 这些API存放于包java.beans中。"},"objectClass":"NSArray"},"text":"内省是什么"},"1":{"objectClass":"MindNode","ID":"87TFG","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"2U0KJ","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"P705W","lineColorHex":"#BF58F5","text":"private static void getProperty(Point point, String proName) throws Exception {\n        BeanInfo beanInfo = Introspector.getBeanInfo(point.getClass());\n        PropertyDescriptor[] proDescriptors = beanInfo.getPropertyDescriptors();\n        for(PropertyDescriptor prop: proDescriptors){\n          if(prop.getName().equals(proName)){\n            Method methodGetx = prop.getReadMethod();\n            System.out.println(methodGetx.invoke(point));//8\n            break;\n          }\n       }\n   }"},"objectClass":"NSArray"},"text":"一般的做法是通过类Introspector来获取某个对象的BeanInfo信息，然后通过BeanInfo来获取属性的描述器（PropertyDescriptor），通过这个属性描述器就可以获取某个属性对应的getter/setter方法，然后我们就可以通过反射机制来调用这些方法。"},"1":{"objectClass":"MindNode","ID":"W2O1H","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"MOH2M","lineColorHex":"#BF58F5","text":"private static void setProperty(Point point, String proName) throws Exception {     \n        PropertyDescriptor proDescriptor = new PropertyDescriptor(proName, Point.class);     \n        Method methodSetX = proDescriptor.getWriteMethod();     \n        methodSetX.invoke(point, 8);     \n        System.out.println(point.getX());// 8     \n    } "},"objectClass":"NSArray"},"text":"直接通过属性的描述器java.beans.PropertyDescriptor类，来访问属性的getter/setter 方法"},"objectClass":"NSArray"},"text":"实现方式"},"2":{"objectClass":"MindNode","ID":"3L912","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"M34M1","lineColorHex":"#26BBFF","text":"反射是在运行状态把Java类中的各种成分映射成相应的Java类，可以动态的获取所有的属性以及动态调用任意一个方法，强调的是运行状态。 \n内省机制是通过反射来实现的，BeanInfo用来暴露一个bean的属性、方法和事件，以后我们就可以操纵该JavaBean的属性"},"objectClass":"NSArray"},"text":"内省和反射区别"},"objectClass":"NSArray"},"text":"java内省机制"},"ID":"GX88V"}